// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ProviderType.
const (
	Container      ProviderType = "container"
	Database       ProviderType = "database"
	VirtualMachine ProviderType = "virtual_machine"
)

// Error400 defines model for Error400.
type Error400 struct {
	// Code Error code
	Code *int `json:"code,omitempty"`

	// Error Invalid input
	Error string `json:"error"`
}

// Error404 defines model for Error404.
type Error404 struct {
	// Code Error code
	Code *int `json:"code,omitempty"`

	// Error Resource not found
	Error string `json:"error"`
}

// Error500 defines model for Error500.
type Error500 struct {
	// Code Error code
	Code *int `json:"code,omitempty"`

	// Error Internal service error
	Error string `json:"error"`
}

// Provider defines model for Provider.
type Provider struct {
	// ApiHost Host URL for the provider API
	ApiHost string `json:"apiHost"`

	// Description Summary of Service Provider
	Description string `json:"description"`

	// Endpoint Endpoint of the Service Provider
	Endpoint string `json:"endpoint"`

	// Id Unique identifier for the Service Provider
	Id string `json:"id"`

	// Name Name of the Service Provider
	Name string `json:"name"`

	// Operations Operations performed on the provider endpoint
	Operations []string `json:"operations"`

	// Type Type of the Service Provider
	Type ProviderType `json:"type"`
}

// ProviderType Type of the Service Provider
type ProviderType string

// ProviderList defines model for ProviderList.
type ProviderList struct {
	// NextPageToken Token for retrieving the next page of results
	NextPageToken *string     `json:"next_page_token,omitempty"`
	Providers     *[]Provider `json:"providers,omitempty"`
}

// ListProvidersParams defines parameters for ListProviders.
type ListProvidersParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// CreateProviderJSONRequestBody defines body for CreateProvider for application/json ContentType.
type CreateProviderJSONRequestBody = Provider

// ApplyProviderJSONRequestBody defines body for ApplyProvider for application/json ContentType.
type ApplyProviderJSONRequestBody = Provider

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	ListHealth(w http.ResponseWriter, r *http.Request)
	// List all providers
	// (GET /providers)
	ListProviders(w http.ResponseWriter, r *http.Request, params ListProvidersParams)
	// Create a Service Provider
	// (POST /providers)
	CreateProvider(w http.ResponseWriter, r *http.Request)
	// Delete a service Provider
	// (DELETE /providers/{providerId})
	DeleteProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID)
	// Get a provider
	// (GET /providers/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID)
	// Update a Service Provider
	// (PUT /providers/{providerId})
	ApplyProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Health check
// (GET /health)
func (_ Unimplemented) ListHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all providers
// (GET /providers)
func (_ Unimplemented) ListProviders(w http.ResponseWriter, r *http.Request, params ListProvidersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a Service Provider
// (POST /providers)
func (_ Unimplemented) CreateProvider(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a service Provider
// (DELETE /providers/{providerId})
func (_ Unimplemented) DeleteProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a provider
// (GET /providers/{providerId})
func (_ Unimplemented) GetProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a Service Provider
// (PUT /providers/{providerId})
func (_ Unimplemented) ApplyProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListHealth operation middleware
func (siw *ServerInterfaceWrapper) ListHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProvidersParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProvider operation middleware
func (siw *ServerInterfaceWrapper) CreateProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProvider(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProvider operation middleware
func (siw *ServerInterfaceWrapper) DeleteProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", chi.URLParam(r, "providerId"), &providerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProvider(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", chi.URLParam(r, "providerId"), &providerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ApplyProvider operation middleware
func (siw *ServerInterfaceWrapper) ApplyProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", chi.URLParam(r, "providerId"), &providerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApplyProvider(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.ListHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/providers", wrapper.CreateProvider)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/providers/{providerId}", wrapper.DeleteProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/providers/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/providers/{providerId}", wrapper.ApplyProvider)
	})

	return r
}

type ListHealthRequestObject struct {
}

type ListHealthResponseObject interface {
	VisitListHealthResponse(w http.ResponseWriter) error
}

type ListHealth200Response struct {
}

func (response ListHealth200Response) VisitListHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ListProvidersRequestObject struct {
	Params ListProvidersParams
}

type ListProvidersResponseObject interface {
	VisitListProvidersResponse(w http.ResponseWriter) error
}

type ListProviders200JSONResponse ProviderList

func (response ListProviders200JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProviders400JSONResponse Error400

func (response ListProviders400JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListProviders500JSONResponse Error500

func (response ListProviders500JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProviderRequestObject struct {
	Body *CreateProviderJSONRequestBody
}

type CreateProviderResponseObject interface {
	VisitCreateProviderResponse(w http.ResponseWriter) error
}

type CreateProvider201JSONResponse Provider

func (response CreateProvider201JSONResponse) VisitCreateProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvider400JSONResponse Error400

func (response CreateProvider400JSONResponse) VisitCreateProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvider500JSONResponse Error500

func (response CreateProvider500JSONResponse) VisitCreateProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProviderRequestObject struct {
	ProviderId openapi_types.UUID `json:"providerId"`
}

type DeleteProviderResponseObject interface {
	VisitDeleteProviderResponse(w http.ResponseWriter) error
}

type DeleteProvider204JSONResponse Provider

func (response DeleteProvider204JSONResponse) VisitDeleteProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvider400JSONResponse Error400

func (response DeleteProvider400JSONResponse) VisitDeleteProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvider404JSONResponse Error404

func (response DeleteProvider404JSONResponse) VisitDeleteProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvider500JSONResponse Error500

func (response DeleteProvider500JSONResponse) VisitDeleteProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProviderRequestObject struct {
	ProviderId openapi_types.UUID `json:"providerId"`
}

type GetProviderResponseObject interface {
	VisitGetProviderResponse(w http.ResponseWriter) error
}

type GetProvider200JSONResponse Provider

func (response GetProvider200JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvider400JSONResponse Error400

func (response GetProvider400JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvider404JSONResponse Error404

func (response GetProvider404JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProvider500JSONResponse Error500

func (response GetProvider500JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ApplyProviderRequestObject struct {
	ProviderId openapi_types.UUID `json:"providerId"`
	Body       *ApplyProviderJSONRequestBody
}

type ApplyProviderResponseObject interface {
	VisitApplyProviderResponse(w http.ResponseWriter) error
}

type ApplyProvider201JSONResponse Provider

func (response ApplyProvider201JSONResponse) VisitApplyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ApplyProvider400JSONResponse Error400

func (response ApplyProvider400JSONResponse) VisitApplyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApplyProvider404JSONResponse Error404

func (response ApplyProvider404JSONResponse) VisitApplyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ApplyProvider500JSONResponse Error500

func (response ApplyProvider500JSONResponse) VisitApplyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health check
	// (GET /health)
	ListHealth(ctx context.Context, request ListHealthRequestObject) (ListHealthResponseObject, error)
	// List all providers
	// (GET /providers)
	ListProviders(ctx context.Context, request ListProvidersRequestObject) (ListProvidersResponseObject, error)
	// Create a Service Provider
	// (POST /providers)
	CreateProvider(ctx context.Context, request CreateProviderRequestObject) (CreateProviderResponseObject, error)
	// Delete a service Provider
	// (DELETE /providers/{providerId})
	DeleteProvider(ctx context.Context, request DeleteProviderRequestObject) (DeleteProviderResponseObject, error)
	// Get a provider
	// (GET /providers/{providerId})
	GetProvider(ctx context.Context, request GetProviderRequestObject) (GetProviderResponseObject, error)
	// Update a Service Provider
	// (PUT /providers/{providerId})
	ApplyProvider(ctx context.Context, request ApplyProviderRequestObject) (ApplyProviderResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListHealth operation middleware
func (sh *strictHandler) ListHealth(w http.ResponseWriter, r *http.Request) {
	var request ListHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListHealth(ctx, request.(ListHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListHealthResponseObject); ok {
		if err := validResponse.VisitListHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProviders operation middleware
func (sh *strictHandler) ListProviders(w http.ResponseWriter, r *http.Request, params ListProvidersParams) {
	var request ListProvidersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProviders(ctx, request.(ListProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProviders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProvidersResponseObject); ok {
		if err := validResponse.VisitListProvidersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProvider operation middleware
func (sh *strictHandler) CreateProvider(w http.ResponseWriter, r *http.Request) {
	var request CreateProviderRequestObject

	var body CreateProviderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProvider(ctx, request.(CreateProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProviderResponseObject); ok {
		if err := validResponse.VisitCreateProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProvider operation middleware
func (sh *strictHandler) DeleteProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	var request DeleteProviderRequestObject

	request.ProviderId = providerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProvider(ctx, request.(DeleteProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProviderResponseObject); ok {
		if err := validResponse.VisitDeleteProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvider operation middleware
func (sh *strictHandler) GetProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	var request GetProviderRequestObject

	request.ProviderId = providerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvider(ctx, request.(GetProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProviderResponseObject); ok {
		if err := validResponse.VisitGetProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ApplyProvider operation middleware
func (sh *strictHandler) ApplyProvider(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	var request ApplyProviderRequestObject

	request.ProviderId = providerId

	var body ApplyProviderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ApplyProvider(ctx, request.(ApplyProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApplyProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ApplyProviderResponseObject); ok {
		if err := validResponse.VisitApplyProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

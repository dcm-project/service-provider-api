// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *int `json:"code,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Provider defines model for Provider.
type Provider struct {
	// Config Configuration for the Service Provider
	Config map[string]interface{} `json:"config"`

	// Name Name of the Service Provider
	Name string `json:"name"`

	// ServiceDescription Summary of Service Provider
	ServiceDescription string `json:"serviceDescription"`

	// ServiceType Type of the Service Provider
	ServiceType string `json:"serviceType"`

	// Uuid Unique identifier for the Service Provider
	Uuid *string `json:"uuid,omitempty"`
}

// ProviderList defines model for ProviderList.
type ProviderList struct {
	Applications *[]Provider `json:"applications,omitempty"`

	// NextPageToken Token for retrieving the next page of results
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// VM defines model for VM.
type VM struct {
	// Id ID of the VM
	Id *string `json:"id,omitempty"`

	// Name Name of the VM
	Name *string `json:"name,omitempty"`

	// Namespace Namespace of the VM
	Namespace *string `json:"namespace,omitempty"`
}

// VMRequest defines model for VMRequest.
type VMRequest struct {
	// Cpu CPU for the VM
	Cpu *int `json:"cpu,omitempty"`

	// Id ID of the VM
	Id *string `json:"id,omitempty"`

	// Name Name of the VM
	Name *string `json:"name,omitempty"`

	// Namespace Namespace of the VM
	Namespace *string `json:"namespace,omitempty"`

	// OsImage Base image of the OS
	OsImage *string `json:"osImage,omitempty"`

	// Ram Ram for the CPU
	Ram *int `json:"ram,omitempty"`
}

// CreateVMJSONRequestBody defines body for CreateVM for application/json ContentType.
type CreateVMJSONRequestBody = VMRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	ListHealth(w http.ResponseWriter, r *http.Request)
	// Get a provider
	// (GET /provider/{id})
	GetProvider(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get all providers
	// (GET /providers)
	ListProviders(w http.ResponseWriter, r *http.Request)
	// Delete an application
	// (DELETE /vm/provider/{provider-id})
	DeleteApplication(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID)
	// Create a VM
	// (POST /vm/provider/{provider-id})
	CreateVM(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Health check
// (GET /health)
func (_ Unimplemented) ListHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a provider
// (GET /provider/{id})
func (_ Unimplemented) GetProvider(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all providers
// (GET /providers)
func (_ Unimplemented) ListProviders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an application
// (DELETE /vm/provider/{provider-id})
func (_ Unimplemented) DeleteApplication(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a VM
// (POST /vm/provider/{provider-id})
func (_ Unimplemented) CreateVM(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListHealth operation middleware
func (siw *ServerInterfaceWrapper) ListHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApplication operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider-id" -------------
	var providerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "provider-id", chi.URLParam(r, "provider-id"), &providerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApplication(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateVM operation middleware
func (siw *ServerInterfaceWrapper) CreateVM(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider-id" -------------
	var providerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "provider-id", chi.URLParam(r, "provider-id"), &providerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateVM(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.ListHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider/{id}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/vm/provider/{provider-id}", wrapper.DeleteApplication)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/vm/provider/{provider-id}", wrapper.CreateVM)
	})

	return r
}

type ListHealthRequestObject struct {
}

type ListHealthResponseObject interface {
	VisitListHealthResponse(w http.ResponseWriter) error
}

type ListHealth200Response struct {
}

func (response ListHealth200Response) VisitListHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetProviderRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetProviderResponseObject interface {
	VisitGetProviderResponse(w http.ResponseWriter) error
}

type GetProvider200JSONResponse Provider

func (response GetProvider200JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvider400JSONResponse Error

func (response GetProvider400JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvider500JSONResponse Error

func (response GetProvider500JSONResponse) VisitGetProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProvidersRequestObject struct {
}

type ListProvidersResponseObject interface {
	VisitListProvidersResponse(w http.ResponseWriter) error
}

type ListProviders200JSONResponse ProviderList

func (response ListProviders200JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProviders400JSONResponse Error

func (response ListProviders400JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListProviders500JSONResponse Error

func (response ListProviders500JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplicationRequestObject struct {
	ProviderId openapi_types.UUID `json:"provider-id"`
}

type DeleteApplicationResponseObject interface {
	VisitDeleteApplicationResponse(w http.ResponseWriter) error
}

type DeleteApplication204JSONResponse VM

func (response DeleteApplication204JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplication400JSONResponse Error

func (response DeleteApplication400JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplication500JSONResponse Error

func (response DeleteApplication500JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateVMRequestObject struct {
	ProviderId openapi_types.UUID `json:"provider-id"`
	Body       *CreateVMJSONRequestBody
}

type CreateVMResponseObject interface {
	VisitCreateVMResponse(w http.ResponseWriter) error
}

type CreateVM201JSONResponse VM

func (response CreateVM201JSONResponse) VisitCreateVMResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateVM400JSONResponse Error

func (response CreateVM400JSONResponse) VisitCreateVMResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateVM500JSONResponse Error

func (response CreateVM500JSONResponse) VisitCreateVMResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health check
	// (GET /health)
	ListHealth(ctx context.Context, request ListHealthRequestObject) (ListHealthResponseObject, error)
	// Get a provider
	// (GET /provider/{id})
	GetProvider(ctx context.Context, request GetProviderRequestObject) (GetProviderResponseObject, error)
	// Get all providers
	// (GET /providers)
	ListProviders(ctx context.Context, request ListProvidersRequestObject) (ListProvidersResponseObject, error)
	// Delete an application
	// (DELETE /vm/provider/{provider-id})
	DeleteApplication(ctx context.Context, request DeleteApplicationRequestObject) (DeleteApplicationResponseObject, error)
	// Create a VM
	// (POST /vm/provider/{provider-id})
	CreateVM(ctx context.Context, request CreateVMRequestObject) (CreateVMResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListHealth operation middleware
func (sh *strictHandler) ListHealth(w http.ResponseWriter, r *http.Request) {
	var request ListHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListHealth(ctx, request.(ListHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListHealthResponseObject); ok {
		if err := validResponse.VisitListHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvider operation middleware
func (sh *strictHandler) GetProvider(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetProviderRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvider(ctx, request.(GetProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProviderResponseObject); ok {
		if err := validResponse.VisitGetProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProviders operation middleware
func (sh *strictHandler) ListProviders(w http.ResponseWriter, r *http.Request) {
	var request ListProvidersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProviders(ctx, request.(ListProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProviders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProvidersResponseObject); ok {
		if err := validResponse.VisitListProvidersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApplication operation middleware
func (sh *strictHandler) DeleteApplication(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	var request DeleteApplicationRequestObject

	request.ProviderId = providerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApplication(ctx, request.(DeleteApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApplication")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApplicationResponseObject); ok {
		if err := validResponse.VisitDeleteApplicationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateVM operation middleware
func (sh *strictHandler) CreateVM(w http.ResponseWriter, r *http.Request, providerId openapi_types.UUID) {
	var request CreateVMRequestObject

	request.ProviderId = providerId

	var body CreateVMJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateVM(ctx, request.(CreateVMRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateVM")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateVMResponseObject); ok {
		if err := validResponse.VisitCreateVMResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

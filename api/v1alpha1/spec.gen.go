// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUVPbOBf9Kxp936MTJyHQrd8gYbqhJLCF0Ol2mI5i38QCWxKSnOBh8t93JDvYjm3a",
	"3YG+tE/x2NK5uvece67yhH0eC86AaYW9J6z8EGJiH0+l5NI8CMkFSE3BvvZ5AOY3AOVLKjTlDHvZYmS/",
	"ORgeSSwiwN6w13OwTgVgD1OmYQUSbx0MO+QmjBiUIisDk29UWlK2wtutgyU8JFRCgL2vOcjt8zK+uANf",
	"G/ibaf3UNKjHm4wRXyIdArqZlk+N+4MDGB4evevAH+8Xnf4gOOiQ4eFRZzg4OuoP+++GvV6vfj4HMxI3",
	"lGZGYmgJtIGFArkG2YamBPFbIO2nCm69XtXSOPixQ0B0JCieSIOrZQK2YJeSr2kADXRXAu+f4yqJYyJT",
	"c4orkGvqA3pGKuf5MVnADZUa3UybFtZSb2JrzuhDAogGwDRdUpBoyaVN/sXQb8fli2HvkwWsqdRN0NmL",
	"fejrVPwY9Dr+bm/Yw9sy5iudSrDb/6CMc6p0XR0MHvU3QVbwTfN7aFDItXltmZKgJYU1ZSubotmJzE6T",
	"swSVRFpV0oT0TPw9mhxN7k7T6WDem11/OTj/PB9efJ7o6fXZ/TTth7PxfHB+/Vc6u/vyOBufHszGx5vp",
	"6Ox9U9VFnkhmBxpi+/B/CUvs4f+5hQ26uQe6pbYoeolISdKG5rLF+gQPCTTVyRdJvTajy/mzhqvG0G9y",
	"zV/QwhzM1SQ206C2/4QoQDTOBWQALq4qB3tISNql3PU504QykAFV98pdQsAl8SKiDVENESWJ69E+kfiZ",
	"qtHl/Dtc/ajzmoWULXk2VpkmvpHO1tkLPh7VXRMdX06wgyPqA1O2PBlz+FgQPwQ06Bp6ExlhD4daC+W5",
	"7maz6RL7ucvlys33Kvd8MjqdXZ12Bt1eN9RxZNVOta1iS9w1SJUdbt0nkQhJ35IlgBFBsYcPuj17AEF0",
	"aBvADYFEOjSPK9D1Av9pPyM/BP/eVvqFpE1jEbNvEmAPG2PKdmNjgkpwk5SJMOj16oEuPlp+VDa59iLb",
	"T+46dndm4T7tnjo02LpEiIj6pBiGEegGbY7te0RsEqU9aEEUBIgzlGTDbDKupZPttc0giCQxaGtZX58w",
	"ZVbVIFO861NMhLAYmWWZkyy5jInGHk6Swv7LgyIHMswUOKUscXmUGJn+G/TbGgXDnbiBWdpL5XDvVFbH",
	"Av9lO8a2Y/Z8hKNRjr518DCj/FXiZfffhpAnJEAyd/qtgw9/RswJ0yAZiVBmtgjyhWUl72THypqzo4+r",
	"hpYbSSC15YVEVd58oriDVJWa7W9V6hsKzJb+hAfpK2prN7q31btUfg/aE3X/jUVtTOoXF/NOnchWqOrK",
	"qnWMmGGASBRZ5234s6Eax0dx0VMtM+SVuK5cpn/z3sT7B8gILLiusV8dyq1asEgt/zirGvgAJQn8fDt7",
	"c7n9llq71Ir5ZlGy5Rnv2e3Zxdvb7T8BAAD//xzBmdUnEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

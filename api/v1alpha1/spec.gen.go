// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW3W7bOBN9FYLfdylb8k/cre5S2+g6jd0u4rToFkFBS2OLiSSyQ8qJEejdF6TkSLaU",
	"bBZI2wW2V5ZJzZz5OXM09zQQiRQppFpR/56qIIKE2ccpokDzIFFIQM3BHgciBPMbggqQS81FSv3iZWLv",
	"HAp3LJExUH/oeQ7VOwnUpzzVsAGkuUNh77nNRwJKsY1xUxoqjTzd0Dx3KMK3jCOE1P9SOrl6eE2sriHQ",
	"xv0HFFseQmvs6Zpvmshje54hM//JWiDREZALwC0PgDz4a8FKWdJSjQVLgIj1Y14e6kNvshVsOepmtg5V",
	"heGk7vkY6CJLEoY7g/UkzrtsBR85avJx/kRaDeylPT8GNafPym6btPnOMh42nV6m/FsGhIeQar7mgE+1",
	"oYLo9QcwPBm96sBvr1edXj8cdNjwZNQZ9kej3rD3auh53t9SyUZU9vIw99YuOHseNcjn0LsOA9lBUCLD",
	"AKivMYMaJU+ljHnA9s18SXaSuu8Wpv47yv4P63XOlW4WilWZ2v9cQ2If/o+wpj79n1uJmlsqmvuQRxUF",
	"Q2Q7O8Vwp79KtoGvWtxAy5wtzbEtDYJGDluebmyVjCUxlmYgEFQWa3VQKdidyT/Hs9Hserqb9y+9xfLz",
	"4PzT5fD9p5meL89u5rtetJhc9s+Xf+wW15/vFpPpYDE5vZ2Pz14/o4K5OeLpWpQE0iwwBcudowQm43kL",
	"Yz7MqENjHkCq7JwXakZPJQsiIP2u6WGGMfVppLVUvuve3t52mb3uCty4pa1yz2fj6eJi2ul3vW6kk9hW",
	"mWtbgkdwt4CqCG7bY7GMWM8YCQkpk5z6dND1bACS6ch2142AxToyjxvQzSb9bq9JEEFwY3v1RNKGTpZA",
	"s5D61NCssKZGGZQUJimD0Pe8JtD7d7YTqhDfI2R75coSzq1x1b3nYV54i0G3COvEnhNmA68ZkhVTEBKR",
	"kqwY19mkkUJhe6gBkiFLQAMq6n+5p9xgmGrutc6nVvcqKTTT55Q7gAlvLTBhmvp7hTxm41WjWsM9DyHV",
	"R6PqXqtC9Sr/z5nXekqW7UefWkHGJVzu0GHRrhcJoNh/WiDfsJCYmoGymCc/AnOWasCUxcR8jwAJlC/W",
	"WbinT1rnjolQCtUyLmME1ni9olr54SOy0v9DxhX2P4NxtvRvRLj7/mQ7jDRv8L33o/lutOc/zvM9cY9l",
	"8kh592rb+q14C5qwth3nkONvQdfufoKeei/Or1+kaiVVQQhZFalGJfUojcziQFgct64aqnXPqN9+92bb",
	"/flXwx9teByTqsnWUWFRDHix+ro0v8r/CgAA//9q/MFYKBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

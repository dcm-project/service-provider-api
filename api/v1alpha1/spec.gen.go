// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+V4jbHmVL/hF31VtqG53T2O0Qp0VXBAUtnS0mksiSlBMj0P8+kJIj2VKy",
	"DEjbh/XJMsm77+677468h4AngqeYagX+PaggwoTaz6mUXJoPIblAqRna5YCHaH5DVIFkQjOegl8cJnbP",
	"AbyjiYgR/KHnOaB3AsEHlmrcoITcAdx7bvORoFJ0Y9yUhkpLlm4gzx2Q+C1jEkPwv5ROrh6O8dU1Btq4",
	"/yD5loXYGnu6Zpsm8tiuZ5Ka/2TNJdERkguUWxYgefDXgpXSpIWNBU2Q8PVjXh74gZtshVsmdTNbB1Rh",
	"OKl7Pga6yJKEyp3BehLnXbbCj0xq8nH+RFoN7KVdPwY1q8/Kbpu0+c4yFjadXqbsW4aEhZhqtmYonypD",
	"BdHrD3B4MnrVwT9erzq9fjjo0OHJqDPsj0a9Ye/V0PO8f5WSLeJh0q30O3sBNVTnwF2HouhIVDyTAYKv",
	"ZYY1LZ4KEbOA7qv4krIkdd8tEm3nezbZl/DQ/AWo/Y/UnDOlm5zQKir7n2lM7MfvEtfgw29uNbjccmq5",
	"DxKpoqBS0p3tVLzTXwXd4FfNb7Cll5Zm2bIsUUuGW5ZuLEHGkhhLw5hElcVaHTCFuzPx93g2ml1Pd/P+",
	"pbdYfh6cf7ocvv800/Pl2c1814sWk8v++fKv3eL6891iMh0sJqe38/HZ62cwmJsllq55qRVNA0NY7hwl",
	"MBnPW8TxYQYOxCzAVNleLiYWnAoaREj6XVPDTMbgQ6S1UL7r3t7edqnd7nK5cUtb5Z7PxtPFxbTT73rd",
	"SCexZZlpS8EjuFuUqghu26OxiGjPGHGBKRUMfBh0PRuAoDqy1XUjpLGOzOcGdbNIf9ptEkQY3NhaPZG0",
	"kZMV0CwEH4zMCmsw3a8EN0kZhL7nNYHev7OVUMWAPUK2W64o4dyaVt17FuaFtxh1y/Cc2HVCbeA1Q7Ki",
	"CkPCU5IVk3A2aaRQ2B72q6CSJqhRKvC/3AMzGIZN2N9NwEKojzvTfU55z5vw1lwmVINfzImmGq8abA33",
	"OsRUH7Wqe62KAVf5f06/1lOyaj+6TjkZl3C5A8OiXC8SQPHGaYF8Q0NiOENlMU9+BOYs1ShTGhNz9aAk",
	"WB6sq3Avn7SuHROh4KqlXcYSaeN4JbXyjiOiuloPFVfY/wzFWerf8HD3/cV2GGne0HvvR+vdzJ7/uc73",
	"wj0ek0eTdz9tW++Kt6gJbXs+Hmr8Lera3k+Yp96L6+uXqFpFVQhCVCTVpKQelZF5OBAax61PDdX6zqjv",
	"fvdi2/fzr4I/WvA4JlWRraPComjw4unrQn6V/xMAAP//attdywwRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

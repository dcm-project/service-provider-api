// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yX31PbuBPA/xWNvt/HJHZCSqnfKMlwoUngjuQ6PYZhhL2JBbYkJDnBw+R/v5HsOA4W",
	"tA9XejPHCxGS9odWn12tn3DIU8EZMK1w8IRVGENK7HAoJZdmICQXIDUFOx3yCMxvBCqUVGjKGQ6Kzciu",
	"tTA8klQkgIO+77ewzgXgAFOmYQkSb1oYtppdOlJQiiyNmlJQaUnZEm82LSzhIaMSIhxclUquq2389g5C",
	"bdRfSL6iETh8J4L+xpVumjazaP7HGC24RDoGJEod6PhiVD8RjrUWgeclPCRJzJUOjvwjv+lsa9/Ac3uX",
	"WZoSmSO+QJcgVzQEVHldt/Ylu4U/qdTI/MlIgiYkjCkDl1TDA2CR4JQ5jjssV4x9c9pXffBWXW+VugzQ",
	"qKl6zuhDBohGwDRdUJBVSF810u0dQP/D4cc2HH26bXd70UGb9D8ctvu9w8Nuv/ux7/vOKDOSOmickhR+",
	"6Gz32S2sqNQu1QYcYhSqpoHzag0JkAsuU4gQZ/voVPGvWbzCp8MZbuGLuf17fml+BsPxcDY0LFMNqTXX",
	"8KacIFKSfPf/c79muXj14CxLjQ+rgqabtKAJt3BENLklygxDzjShDGxy7ULVlHk9P+3NWEbKnfsp0aqS",
	"sQbqXtAbqd3Cj20Coi1B8UyGgAMtM6gl/JgWub2f9Awe9Y0gS7jR/B4cyTgz0xZTCVpSWFG2tBE0kshI",
	"mpBKUFmi1R4+kJ+Jv05Gh6O7YT7pzf3p7NvB+Ou8f/51pCezs/tJ3o2ng3lvPPs9n959e5wOhgfTwfF6",
	"cnL2yYXcFh3rd8XC/yUscID/5+1KtVfWaa+63AYim0ZlNFOULXhRxZkmoYnW81KFByeTBjtlGUxoCExZ",
	"7orEw8eChDGgXsdkZyaTskKqwPPW63WH2OUOl0uvlFXeeHQynF4O272O34l1mljXqbYBfcHuCqQqnFt1",
	"SSJi0i0TlBFBcYAPOr51QBAd25B5MZBEx2a4BFe9t8sojCG8tzf/yqErJEcRDrBhrJDGhncluDmUsdDz",
	"fUeh+GJvQhX1/pllu+RtL9172o5G0abQlIB2JPnAziOCVOmw2GX4vrPFzloBEESSFLQl7OoJU6POBA1v",
	"Kyne+YDr+WwyrVV2B8YjU/KIxgHOsl2G12rBdSM4/S12ULxIRIiEhtZX704Vj+RO/48xv2nAO+Voa2PT",
	"wv3iSv4Rq0U75DD5mUTIBAqUtfnhLWyOmAbJSGIRME9NubFOWgOTeq1wZsUpaAdVyLwL9nXLird9NGiA",
	"dgr630GZ/yaUmaz+j9NVsCJqSAlnZ30igVgKGay/X7CK3b8MJRvmzzzKfxJF++5tGvR23+l9G3orKi8d",
	"tVFkDo7nIrISDMEjVdq0iN+l+ViIJH+H+R3mnwvzFk0HzPX+Ur3YDZueFpEkcXbBCq2pjtGCJtr0Ajkq",
	"P+aabXEl8QLqDxnIfMd6qWcXoF/xuttPxnesXFhVVOwAspoKkeJeiy8+D2+uN38HAAD//+0rkIBKFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

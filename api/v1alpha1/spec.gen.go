// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUVPbOhP9Kxp932MSJyGlrd9owvSmJYELhE5vh+ko9iYW2JKQ5ECGyX+/I8khdqxA",
	"ewd4KU94bOmc1e7R2Q33OOKZ4AyYVji8xypKICP28VBKLs2DkFyA1BTs64jHYP7GoCJJhaac4dAtRvZb",
	"A8MdyUQKOOy12w2slwJwiCnTMAeJVw0Ma2QfRgZKkbmBKTYqLSmb49WqgSXc5FRCjMMfBcjlwzI+vYJI",
	"G/iLUT1qGtf5hgPEZ0gngC5G5ahxp7sHvXf775vw4eO02enGe03Se7ff7HX39zu9zvteu92ux9fAjGSe",
	"1IxJBjuIbmGqQC5A7kJTgkQ7IO2nCm49X9XUNPBdk4BoSlA8lwZXyxxswk4kX9AYPOWuEG/HcZZnGZFL",
	"E8UZyAWNAD0glc/5NZ/CBZUaXYx8C2tHBxYLTpmuMx6cDNdnfpQx0VqEQZDyiKQJVzr80P7grZlPGBNG",
	"b3JANAam6YyCRDMun+Z8Odk8SnudT2FBpfZBuxfb0OdL8WvQi+zJa2iDt2ksVjYqZKVaXv4HPR5Rpeua",
	"ZHCnfwoyh5+aX4NHl+fmtS2aBC0pLCib29OancjsNMeXoPJUq8qJYflF/NMf7g+vDpej7qQ9Pv++d/Rt",
	"0jv+NtSj8y/Xo2UnGQ8m3aPzv5fjq+9348Hh3nhwcDvqf/noK4AoDuJMSENmH/4vYYZD/L9gY75B4bxB",
	"6TJubjCRkiw9V9om6xRucvDlKRJ5PTf9k8mDnKt21PF59R9onA3M1TAzPai2/xNRgGhWCMgAHJ9VArvJ",
	"ybJFeRBxpgllIGOqrlUwg5hLEqZEm0J5GCXJ6mynJHsoVf9k8kStftXvzULKZtw1c6ZJZKSzamyRD/p1",
	"r0YHJ0PcwCmNgCmbHlc5fCBIlADqtkx5c5kWDqzCILi9vW0R+7nF5Two9qrgaNg/HJ8dNrutdivRWWrV",
	"TrXN4g7eBUjlglt0SCoS0rHFEsCIoDjEe622DUAQndgLECRAUp2Yxzl4uslf9jOKEoiubaYfObS5WMTs",
	"G8Y4xMaY3G5s/FAJbg5lGLrtdp3o+Kutj3L9covZfgrWThFImFOlHZe901x5Qj+1q0Ai01dzkqIRiRLK",
	"6oauarH3JRANJZ9xjg5Kf+Lxci0LcO2XCJHSyG4OrpSLyFnV7xhZtWsUNr+Vts6LMddr0cA9V6Zn4XOT",
	"sofqE4lRkVrD+e41OIdMg2QkRc4gERQLy+rbiGfk0UtVjvfrpyaNV0EpYKfJFLTHJwf2PSL2QpX2oClR",
	"ECPOUO5mrOGgJk+31xqzIJJkoG37/HGPKbMOC3KJ1z3DZNBibLI24zIjGoc4zzdTSXl+KYCMS2xwSqfE",
	"21r9HfTLmq57z6hrX8HHHPUL9D9d12vZsbLm7Bjm9VBnhFvLNxJVxc0QG5/0G+kOpb6gwF7Crddj5Kub",
	"9ZtJe8W8VieyGSpZsto5z5ipBJE0tbbr9XbfHLNpl2rHMPPMXdn+qnsruq/on8EVUPi7saq2451CsDA7",
	"/ttSFcBn0JVJ8JWN7MW19qaz3TrbdDaL4pa7urvfcAFeXa7+DQAA//+/eQsUIxYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

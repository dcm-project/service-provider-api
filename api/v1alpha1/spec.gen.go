// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUXPaOhP9Kxp936PBQEh667cEMr2kgeQ2gU5vJ9MR9oKV2JIiySRMxv/9jmQDBosk",
	"D7Qv7VMcSbtndfbsrnjBIU8FZ8C0wsELVmEMKbGf51JyaT6E5AKkpmCXQx6B+RuBCiUVmnKGg+Iwsnse",
	"hmeSigRw0G21PKyXAnCAKdMwB4lzD8PKs8tHCkqRuXFTGiotKZvjPPewhMeMSohw8L10crc+xqf3EGrj",
	"/lryBY3AGTub0XkduWfXM0nM/2jGJdIxoBuQCxoCWvtzYDGSOtgYkRQQn+3zsuYHP2RTWFCp67f1sCoM",
	"+1XPu0A3WZoSuTRYr+J8zqYwoVKjyfCVa9Wwb+36LqhZfdftFqnLd5bRqO50zOhjBohGwDSdUZCvpWED",
	"0e4cQff45EMD/vo4bbQ70VGDdI9PGt3OyUm72/7QbbVab0rJJnH70k76vZWAaqrz8HODgGhIUDyTIeBA",
	"ywwqWrykStf1SIRIaGhVZ/+nGlL78X8JMxzg//mb6vTL0vTXPOTrKIiUZGnlCM/6hyBz+KH5AzgEc2uW",
	"LbUStKSwoGxuWTaWyFiazEpQWaLVFtOwvBD/9gYng/vz5bAzbo1uvx1dfh13r74O9PD24mG4bMej/rhz",
	"efvPcnT/7XnUPz8a9U+fhr2Lj84M1GppMqwz5JLKoL9S32R4ADG8p4h3gJ5gauThrh3jTQkS7nFpt7b8",
	"vkXNXnFNhl/gMQOXskKROdrc9XhdVds3arva9G/IvYe5GqRm/NTsz4gCRNOyQoyDq5utwB4zsmxS7oec",
	"aUIZyIiqB+XPIOKSBAnRJlEOREnSOtoXkq5T1bsev5Gr90rGHKRsxstZqElopJN7O+D9Xn1KoNPrAfZw",
	"QkNgytJTZA6fChLGgDpNk95MJjjAsdZCBb7/9PTUJHa7yeXcL22VfznonY9uzhudZqsZ6zSxnYxqy+Ie",
	"3AVIVQS3aJNExKRtkyWAEUFxgI+aLRuAIDq2BeDHQBIdm8856DrBf9ttFMYQPlimX7m0KSzbpAcRDrBp",
	"5YU1NmNECW4uZRA6rVYd6OqzzY8qJvUOst3yRQnnv9Ao3xvxJ9CIuKbhdnifQFf2BJEkBQ1S4eD7C6bG",
	"keEIryrPVHl1GhqdeOUz0MQw4zIlGgfF2K43qzs3B0ZdwPTOkPPvVfGK2fh/36TLaxo1tHq4e0C04r3r",
	"gDojEZJlo809fPwrMAdMg2QkQUWvQ1AerAqpEITYkFSRktorIyNfRJLEKXjlVHt196cn276U/iR8b8KT",
	"BG2SbHO+SCsdZPXVKFtJBAloxzjr23VErAwq90FToiBCnKGseJEP+jVNFLanG6N3NZpKZAfuON2DpWcy",
	"dOVmxFGv9P67S3AlG1bVjIlQcOVoNj0JpHZ8I7HyN9amh+0qrbC3L7VfLDBL/RmPlgfU1uq1nm//AC1f",
	"8zuibv9kUf/pp2t1ohVDxdlCYMVT1sf5Xf5fAAAA//99AfBZJRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

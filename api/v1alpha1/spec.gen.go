// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXXXPaOBfHv4pGz3MJ2BCTtr5LA9MlBZJtYDvdTCYj7ANWYkuKLEM8Gb77jmRjXqxN",
	"20263d3JTXCsl/Pi3/nr6BEHPBGcAVMp9h9xGkSQEPPYl5JLz3X1s5BcgFQUzEjAQ9C/IaSBpEJRzrBf",
	"zEdmrIHhgSQiBux7rtvAKheAfUyZggVIvG5g0JPrewzYksQ0RJSJTOFqYaokZQu8XjewhPuMSgixf1Vu",
	"cl1N47NbCJTevvTde67v3nf4/glSnskAEOMKzXnGwucG0H1u8rvfmXwFkpEYpSCXNABUzPvrQVxIvqQh",
	"yHoQRNBfeKrqPui3aPppiOZcIhUBEuUe6ORisBsajpQSvuPEPCBxxFPlv3XfunVnG/sGDu1dZklCZI74",
	"HF2WUVde71r7mM3gNyoV0n8yEqMRCSLKwLaq5gGwUHDKLOH2yxFtX0f7pA/Osu0sE5sBGta3njJ6nwGi",
	"ITBF5xRkldInjbQ7R+B1j9804e27WbPdCY+axOseN73O8XHba7/xXNeaZUYSC5ZjksA3xXaXzWBJpbJt",
	"rcEhesO0buC8GkMC5JzLBELE2T46Vf53LF7hD/0JbuCLqfl7fql/ev1hf9LXLFMFiTFX86Z8QaQk+fb/",
	"Q78muXgycJYl2odlQdNNUtCEGzgkisxIqh8DzhShDExxbVNVX/N0fZovYxgpZ+6XRKMqxh1Q95JeK+0G",
	"fmgSEE1ZKh72lcxgp+CHtKjt/aJn8KBuBFnAjeJ3YCnGiX5tMJWgJIUlZQuTQb0S6ZU6pRLSLFbpHj6Q",
	"n4nfTwfHg9t+PupM3fHky9Hw89Q7/zxQo8nZ3ShvR+PetDOc/JqPb788jHv9o3HvZDU6PXtnQ26DjvG7",
	"YuH/EubYx/9ztmemUx6YTvVxa4isa8qoX1E254WcM0UCna1DqcK901GNnVIGYxoASw13ReHhE0GCCFCn",
	"paszk3GpkKnvOKvVqkXMcIvLhVOuTZ3h4LQ/vuw3Oy23FakkNq5TZRL6J3aXINPCuWWbxCIi7bJAGREU",
	"+/io5RoHBFGRSZkTAYlVpB8XYNN7M4yCCII78+WfCLpCchBiH2vGitVY854KroPSFjrFsXkgFB/Nl0gL",
	"vT+wbIacvY9u9VbbRCSOrV6maEVVhOY0ViDRLEdlsdXdrlaYTEmSgDJWrx4x1WbuM5A53mjqpmgL0iya",
	"tL62J0CjBcWpQ4SIaWC8cG7T4iDc7vctXJuSNuTW89rA3gtarPpOi7X3JERa2yA1DUb3pc127Wb3OiN9",
	"oJiWZ5+nio0tRlpIrF3OqQSiABHEYFV1W2J7POwjU8zeOT3KDLznYf7i37kIf3t+lMp+wFf7B9l9ZcvK",
	"VsVLrZXYFy7ncfM4CNcFdjEoS3vSM+8R+Tp8xcwd+GyCpeV+q1dbH/AhSbsqpps1orCPs4zarkp1VfP+",
	"FurGHG1s/Dz6vBcMtroM/7ugrzG622JZj+cPoCxII91Om0tBVlyJBr0a5R9A/TMQd//7wvqKdgmq2OFZ",
	"ZBaepyI0ss8QPNBU6dvQV/X6RIg4/2ksv/Ylr+Xz48tnUxe2dkhPNCsL3oubsIPX1+s/AgAA//9SNnI1",
	"6xYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
